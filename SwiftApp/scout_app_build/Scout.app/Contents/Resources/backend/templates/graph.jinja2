<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Knowledge Graph Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .graph-container {
            width: 100%;
            height: 600px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: #fafafa;
        }
        .controls {
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            background: white;
            padding: 15px;
            border-radius: 4px;
            border-left: 4px solid #007bff;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        .stat-label {
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Knowledge Graph Visualization</h1>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="entity-count">0</div>
                <div class="stat-label">Entities</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="relationship-count">0</div>
                <div class="stat-label">Relationships</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="file-count">0</div>
                <div class="stat-label">Indexed Files</div>
            </div>
        </div>
        
        <div class="controls">
            <button onclick="loadGraph()">Load Graph</button>
            <button onclick="clearGraph()">Clear</button>
            <input type="text" id="search-input" placeholder="Search entities..." onkeyup="searchEntities()">
        </div>
        
        <div class="graph-container" id="graph-container">
            <div style="text-align: center; padding-top: 250px; color: #666;">
                Click "Load Graph" to visualize the knowledge graph
            </div>
        </div>
    </div>

    <script>
        let graphData = null;
        let simulation = null;
        
        async function loadGraph() {
            try {
                const response = await fetch('/api/kg/graph-data');
                graphData = await response.json();
                
                if (graphData.success) {
                    renderGraph(graphData.data);
                    updateStats(graphData.stats);
                } else {
                    alert('Failed to load graph data: ' + graphData.error);
                }
            } catch (error) {
                console.error('Error loading graph:', error);
                alert('Error loading graph data');
            }
        }
        
        function renderGraph(data) {
            const container = document.getElementById('graph-container');
            container.innerHTML = '';
            
            const width = container.clientWidth;
            const height = container.clientHeight;
            
            const svg = d3.select(container)
                .append('svg')
                .attr('width', width)
                .attr('height', height);
            
            // Create force simulation
            simulation = d3.forceSimulation(data.nodes)
                .force('link', d3.forceLink(data.links).id(d => d.id))
                .force('charge', d3.forceManyBody().strength(-300))
                .force('center', d3.forceCenter(width / 2, height / 2));
            
            // Create links
            const link = svg.append('g')
                .selectAll('line')
                .data(data.links)
                .enter().append('line')
                .attr('stroke', '#999')
                .attr('stroke-opacity', 0.6)
                .attr('stroke-width', d => Math.sqrt(d.value));
            
            // Create nodes
            const node = svg.append('g')
                .selectAll('circle')
                .data(data.nodes)
                .enter().append('circle')
                .attr('r', 5)
                .attr('fill', d => getNodeColor(d.type))
                .call(d3.drag()
                    .on('start', dragstarted)
                    .on('drag', dragged)
                    .on('end', dragended));
            
            // Add labels
            const label = svg.append('g')
                .selectAll('text')
                .data(data.nodes)
                .enter().append('text')
                .text(d => d.id)
                .attr('font-size', '12px')
                .attr('dx', 12)
                .attr('dy', '.35em');
            
            // Update positions on simulation tick
            simulation.on('tick', () => {
                link
                    .attr('x1', d => d.source.x)
                    .attr('y1', d => d.source.y)
                    .attr('x2', d => d.target.x)
                    .attr('y2', d => d.target.y);
                
                node
                    .attr('cx', d => d.x)
                    .attr('cy', d => d.y);
                
                label
                    .attr('x', d => d.x)
                    .attr('y', d => d.y);
            });
            
            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }
            
            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }
            
            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }
        }
        
        function getNodeColor(type) {
            const colors = {
                'Person': '#ff6b6b',
                'Organization': '#4ecdc4',
                'Document': '#45b7d1',
                'Project': '#96ceb4',
                'Concept': '#feca57',
                'Location': '#ff9ff3',
                'Event': '#54a0ff'
            };
            return colors[type] || '#95a5a6';
        }
        
        function updateStats(stats) {
            document.getElementById('entity-count').textContent = stats.entities || 0;
            document.getElementById('relationship-count').textContent = stats.relationships || 0;
            document.getElementById('file-count').textContent = stats.files || 0;
        }
        
        function clearGraph() {
            const container = document.getElementById('graph-container');
            container.innerHTML = '<div style="text-align: center; padding-top: 250px; color: #666;">Click "Load Graph" to visualize the knowledge graph</div>';
            if (simulation) {
                simulation.stop();
            }
        }
        
        function searchEntities() {
            const query = document.getElementById('search-input').value;
            if (query && graphData) {
                // Highlight matching nodes
                const nodes = d3.selectAll('circle');
                nodes.style('stroke', d => 
                    d.id.toLowerCase().includes(query.toLowerCase()) ? '#ff0000' : 'none'
                );
            }
        }
    </script>
</body>
</html>
